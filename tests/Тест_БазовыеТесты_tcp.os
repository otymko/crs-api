#Использовать "../src"
#Использовать asserts

Перем ВерсияПлатформы;
Перем АдресХранилища;
Перем ПарольПоУмолчанию;
Перем ИмяХранилища;

&Тест
Процедура ПроверкаВерсииСервераХранилища() Экспорт

	ВерсияСервераХранилища = МенеджерХранилищ.ВерсияСервераХранилища(АдресХранилища);

	Шаблон = "([1-9]{1}\.\d{1}\.\d{1,3}\.\d{1,5})";
	
	РВ = Новый РегулярноеВыражение(Шаблон);
	Совпадения = РВ.НайтиСовпадения(ВерсияСервераХранилища);

	Ожидаем.Что(Совпадения.Количество() > 0).ЕстьИстина();

КонецПроцедуры

&Тест
Процедура ПроверкаСуществованияХранилища() Экспорт
	
	ИмяНовогоХранилища = "newrepo2" + (Новый УникальныйИдентификатор());
	Пользователь = "Администратор";
	Попытка
		Результат = МенеджерХранилищ.НовоеХранилище1C(АдресХранилища, ИмяНовогоХранилища, ВерсияПлатформы, 
			Пользователь, ПарольПоУмолчанию);	
	Исключение
		Результат = "";
	КонецПопытки;

	ХранилищеСуществует = МенеджерХранилищ.ХранилищеСуществует(АдресХранилища, ИмяНовогоХранилища, ВерсияПлатформы);

	Ожидаем.Что(ХранилищеСуществует).ЕстьИстина();

КонецПроцедуры

&Тест
Процедура ПроверкаОтсутствияХранилища() Экспорт
	
	ИмяНесуществующегоХранилища = "UnknownRepo";

	ХранилищеСуществует = МенеджерХранилищ.ХранилищеСуществует(АдресХранилища, ИмяНесуществующегоХранилища, ВерсияПлатформы);

	Ожидаем.Что(ХранилищеСуществует).ЕстьЛожь();

КонецПроцедуры

&Тест
Процедура ПроверитьСозданиеХранилища() Экспорт

	Пользователь = "Администратор";
	Попытка
		Результат = МенеджерХранилищ.НовоеХранилище1C(АдресХранилища, ИмяХранилища, ВерсияПлатформы, 
			Пользователь, ПарольПоУмолчанию);	
	Исключение
		Результат = "";
	КонецПопытки;

	Ожидаем.Что(Результат).Равно(ИмяХранилища);

КонецПроцедуры

&Тест
Процедура ПроверкаПодключения() Экспорт
	Пользователь = "Администратор";

	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);
	Ожидаем.Что(МенеджерХранилища.АвторизацияПройдена()).ЕстьИстина();

	МенеджерХранилища.Подключиться(Пользователь, "12345", ИмяХранилища);
	Ожидаем.Что(МенеджерХранилища.АвторизацияПройдена()).ЕстьЛожь();

КонецПроцедуры

&Тест
Процедура СписокПользователей() Экспорт

	Пользователь = "Администратор";
	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);
	СписокПользователей = МенеджерХранилища.СписокПользователей();

	Ожидаем.Что(СписокПользователей.Количество()).Больше(0);

КонецПроцедуры

&Тест
Процедура НайтиПользователя() Экспорт

	Пользователь = "Администратор";
	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);

	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(Пользователь);
	Ожидаем.Что(ПользовательХранилища).Существует();
	Ожидаем.Что(ПользовательХранилища.Имя).Равно(Пользователь);

КонецПроцедуры

&Тест
Процедура СоздатьПользователя() Экспорт

	Пользователь = "Администратор";
	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);

	ИмяПользователя = "user_" + Новый УникальныйИдентификатор();
	Роль = РолиХранилища.Разработчик;
	МенеджерХранилища.СоздатьПользователя(ИмяПользователя, ПарольПоУмолчанию, Роль);

	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища).Существует();
	Ожидаем.Что(ПользовательХранилища.Имя).Равно(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища.Роль).Равно(Роль);
	
КонецПроцедуры

&Тест
Процедура ПроверитьУстановкуРолей() Экспорт

	Пользователь = "Администратор";
	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);

	ИмяПользователя = "user_" + Новый УникальныйИдентификатор();
	ПроверитьРольПользователя(МенеджерХранилища, ИмяПользователя, РолиХранилища.ТолькоПросмотр);

	ИмяПользователя = "user_" + Новый УникальныйИдентификатор();
	ПроверитьРольПользователя(МенеджерХранилища, ИмяПользователя, РолиХранилища.Разработчик);

	ИмяПользователя = "user_" + Новый УникальныйИдентификатор();
	ПроверитьРольПользователя(МенеджерХранилища, ИмяПользователя, РолиХранилища.РазработчикРасширенный);

	ИмяПользователя = "user_" + Новый УникальныйИдентификатор();
	ПроверитьРольПользователя(МенеджерХранилища, ИмяПользователя, РолиХранилища.Администратор);

КонецПроцедуры

&Тест
Процедура УдалитьПользователя() Экспорт

	Пользователь = "Администратор";
	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);

	ИмяПользователя = "user_" + Новый УникальныйИдентификатор();
	МенеджерХранилища.СоздатьПользователя(ИмяПользователя, ПарольПоУмолчанию, РолиХранилища.Разработчик);
	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(ИмяПользователя);

	МенеджерХранилища.УдалитьПользователя(ПользовательХранилища.Идентификатор);

	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища.Имя).Равно(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища.Удален).ЕстьИстина();

КонецПроцедуры

&Тест
Процедура ВосстановитьПользователя() Экспорт

	Пользователь = "Администратор";
	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);

	ИмяПользователя = "user_" + Новый УникальныйИдентификатор();
	МенеджерХранилища.СоздатьПользователя(ИмяПользователя, ПарольПоУмолчанию, РолиХранилища.Разработчик);
	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(ИмяПользователя);

	МенеджерХранилища.УдалитьПользователя(ПользовательХранилища.Идентификатор);

	МенеджерХранилища.ВосстановитьПользователя(ПользовательХранилища.Идентификатор);

	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища.Имя).Равно(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища.Удален).ЕстьЛожь();

КонецПроцедуры

&Тест
Процедура ПроверитьОбновлениеПользователей() Экспорт

	Пользователь = "Администратор";
	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);

	ИмяПользователя = "user_" + Новый УникальныйИдентификатор();
	МенеджерХранилища.СоздатьПользователя(ИмяПользователя, ПарольПоУмолчанию, РолиХранилища.Разработчик);

	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(ИмяПользователя);

	ПользовательХранилища.Пароль = "12345";
	ХешПароля = Вспомогательный.ХешированныйПароль(ПользовательХранилища.Пароль);
	ПользовательХранилища.Роль = РолиХранилища.Администратор;
	МенеджерХранилища.ОбновитьПользователяХранилища(ПользовательХранилища);

	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища.Имя).Равно(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища.ХешПароля).Равно(ХешПароля);
	Ожидаем.Что(ПользовательХранилища.Роль).Равно(РолиХранилища.Администратор);

КонецПроцедуры

Процедура ПроверитьРольПользователя(МенеджерХранилища, ИмяПользователя, Роль)
	
	МенеджерХранилища.СоздатьПользователя(ИмяПользователя, ПарольПоУмолчанию, Роль);

	ПользовательХранилища = МенеджерХранилища.НайтиПользователя(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища).Существует();
	Ожидаем.Что(ПользовательХранилища.Имя).Равно(ИмяПользователя);
	Ожидаем.Что(ПользовательХранилища.Роль).Равно(Роль);

КонецПроцедуры

&Тест
Процедура ПроверитьСписокВерсий() Экспорт
	
	Пользователь = "Администратор";
	МенеджерХранилища = Новый КлиентХранилища(АдресХранилища, ВерсияПлатформы);
	МенеджерХранилища.Подключиться(Пользователь, ПарольПоУмолчанию, ИмяХранилища);

	ВерсииХранилища = МенеджерХранилища.СписокВерсий();
	Ожидаем.Что(ВерсииХранилища.Количество()).БольшеИлиРавно(1);

КонецПроцедуры

Процедура Инициализация()

	ИмяХранилища = "newrepo1" + (Новый УникальныйИдентификатор());
	ВерсияПлатформы   = "8.3.14.1630";
	АдресХранилища    = "tcp://localhost:1542/test2";
	ПарольПоУмолчанию = "123";
	
КонецПроцедуры

Инициализация();