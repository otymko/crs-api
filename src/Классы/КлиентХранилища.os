#Использовать 1connector
#Использовать xml-parser

// Ссылка на сервер хранилищ 1С
Перем Адрес;
// Пользователь для авторизации
Перем Пользователь;
// Хеш пароля для авторизации, заполняется в методе "Подключиться"
Перем ХешПароля;
// Версия платформы 1С
Перем ВерсияПлатформы;
// Имя хранилища 1С. Например MyTrade
Перем ИмяХранилища;

// Событие при создании объекта
//
// Параметры:
//   АдресХранилища - Строка - URL-ссылка на сервер хранилищ 1С
//   ВерсияПлатформыХранилища - Строка - версия платформы 1С. Например: 8.3.15.1855
//
Процедура ПриСозданииОбъекта(Знач АдресХранилища, Знач ВерсияПлатформыХранилища)
	Адрес = АдресХранилища;
	ВерсияПлатформы = ВерсияПлатформыХранилища;
КонецПроцедуры

// Подключение к хранилищу 1С, если оно существует
//
// Параметры:
//   ПользовательХранилища - Строка - пользователь хранилища
//   ПарольХранилища - Строка - пароль пользователя хранилища
//   пИмяХранилища - Строка - имя хранилища. Например: `MyTrade` или `Trade/MyRepo`.
//		По умолчанию `maincr`.
//
Процедура Подключиться(Знач ПользовательХранилища, Знач ПарольХранилища, Знач пИмяХранилища = "maincr") Экспорт
	Пользователь = Неопределено;
	ХешПароля = Неопределено;
	
	Хеш = Вспомогательный.ХешированныйПароль(ПарольХранилища);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяХранилища", пИмяХранилища);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Вставить("ПользовательХранилища", ПользовательХранилища);
	Параметры.Вставить("ХешПароляПользователя", Хеш);
	
	ТелоЗапроса = МенеджерЗапросов.ТелоЗапросаНаПодключение(Параметры);
	
	Ответ = Коннектор.Post(Адрес, ТелоЗапроса);
	Если Ответ.КодСостояния = 200 Тогда
		ОтветСервиса = ОбработкаXML.ПрочитатьОтветИзТекста(Ответ.Текст());
		
		Если ОтветСервиса.ЕстьОшибка Тогда
			Сообщить(ОтветСервиса.СодержаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Пользователь = ПользовательХранилища;
		ХешПароля = Хеш;
	Иначе
		ВызватьИсключение(Ответ.Текст());
	КонецЕсли;
	
	ИмяХранилища = пИмяХранилища;
	
КонецПроцедуры

// Возвращает значение, пройдена ли авторизация
//
//  Возвращаемое значение:
//   Булево - Истина или Ложь.
//
Функция АвторизацияПройдена() Экспорт
	Возврат ЗначениеЗаполнено(ХешПароля) И ЗначениеЗаполнено(ИмяХранилища);
КонецФункции

// Создать польльзователя хранилища. Работает только после подключения к хранилищу 
// (метод `Подключиться`)
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя хранилища
//   ПарольПользователя - Строка - пароль пользователя хранилища
//   Роль - РолиХранилища - роль пользовователя хранилища
//
Процедура СоздатьПользователя(Знач ИмяПользователя, Знач ПарольПользователя, Знач Роль) Экспорт
	
	ИдентификаторПодключения = Новый УникальныйИдентификатор();
	ИдентификаторОперации = Новый УникальныйИдентификатор();
	
	ХешНовогоПароля = Вспомогательный.ХешированныйПароль(ПарольПользователя);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяХранилища", ИмяХранилища);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Вставить("ПользовательХранилища", Пользователь);
	Параметры.Вставить("ХешПользователяХранилища", ХешПароля);
	Параметры.Вставить("ИдентификаторПодключения", ИдентификаторПодключения);
	Параметры.Вставить("ИдентификаторОперации", ИдентификаторОперации);
	Параметры.Вставить("ИмяПользователя", ИмяПользователя);
	Параметры.Вставить("ХешНовогоПароля", ХешНовогоПароля);
	Параметры.Вставить("Роль", Роль);
	
	ТелоЗапроса = МенеджерЗапросов.ТелоЗапросаНаСозданиеПользователя(Параметры);
	
	Ответ = Коннектор.Post(Адрес, ТелоЗапроса);
	ОбработатьБазовыйОтветСервиса(Ответ);
	
КонецПроцедуры

// Возвращает пользователя хранилища по его имени
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя хранилища
//
//  Возвращаемое значение:
//   ПользовательХранилища - объект пользователя хранилища
//   Неопределено - если пользователь не был найден
//
Функция НайтиПользователя(Знач ИмяПользователя) Экспорт
	
	ИдентификаторПодключения = Новый УникальныйИдентификатор();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяХранилища", ИмяХранилища);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Вставить("ПользовательХранилища", Пользователь);
	Параметры.Вставить("ХешПользователяХранилища", ХешПароля);
	Параметры.Вставить("ИдентификаторПодключения", ИдентификаторПодключения);
	Параметры.Вставить("ИмяПользователя", ИмяПользователя);
	
	ТелоЗапроса = МенеджерЗапросов.ТелоЗапросаПоискаПользователя(Параметры);
	
	Ответ = Коннектор.Post(Адрес, ТелоЗапроса);
	Результат = Ответ.Текст();
	
	Если Ответ.КодСостояния = 200 Тогда
		ОтветСервиса = ОбработкаXML.ПрочитатьОтветИзТекста(Результат);
		Если ОтветСервиса.ЕстьОшибка Тогда
			Сообщить(ОтветСервиса.СодержаниеОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		user = ОтветСервиса.РезультатЧтения["call_return"]["_Элементы"]["user"];
		НайденныйПользователь = Новый ПользовательХранилища();
		НайденныйПользователь.Заполнить(user);
		
		Возврат НайденныйПользователь;
		
	Иначе
		Сообщить(Результат);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Структура = ОбработкаXML.ПрочитатьПользователяИзXML(Результат);
	Исключение
		// логировать
		Сообщить("Не удалось прочитать данные пользователя. Причина: " + ОписаниеОшибки());
		Структура = Неопределено;
	КонецПопытки;
	
	Возврат Структура;
	
КонецФункции

// Обновляет пользователя хранилища на основе объекта ПользовательХранилища.
// Обновляемые поля: имя пользователя, пароль, роль.
//
// Параметры:
//   ПользовательХранилища - ПользовательХранилища - объект пользователя хранилища
//
Процедура ОбновитьПользователяХранилища(ПользовательХранилища) Экспорт
	
	ИдентификаторПодключения = Новый УникальныйИдентификатор();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяХранилища", ИмяХранилища);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Вставить("ПользовательХранилища", Пользователь);
	Параметры.Вставить("ХешПользователяХранилища", ХешПароля);
	Параметры.Вставить("ИдентификаторПодключения", ИдентификаторПодключения);
	Параметры.Вставить("ИдентификаторПользователя", ПользовательХранилища.Идентификатор);
	Параметры.Вставить("ИмяПользователя", ПользовательХранилища.Имя);
	Если ПользовательХранилища.Пароль = Неопределено Тогда
		Параметры.Вставить("ХешПароля", ПользовательХранилища.ХешПароля);
	Иначе
		Параметры.Вставить("ХешПароля", Вспомогательный.ХешированныйПароль(ПользовательХранилища.Пароль));
	КонецЕсли;
	Параметры.Вставить("Роль", ПользовательХранилища.Роль);
	
	ТелоЗапроса = МенеджерЗапросов.ТелоЗапросаНаОбновлениеРолиПользователя(Параметры);
	
	Ответ = Коннектор.Post(Адрес, ТелоЗапроса);
	ОбработатьБазовыйОтветСервиса(Ответ);
	
КонецПроцедуры

// Удаляет (деактивирует) пользователя хранилища 1С.
// Для получения идентификатора пользователя хранилища, нужно воспользоваться
// методом `НайтиПользователя`.
//
// Параметры:
//   ИдентификаторПользователя - Строка - идентификатор пользователя хранилища
//
Процедура УдалитьПользователя(Знач ИдентификаторПользователя) Экспорт
	
	ИдентификаторПодключения = Новый УникальныйИдентификатор();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяХранилища", ИмяХранилища);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Вставить("ПользовательХранилища", Пользователь);
	Параметры.Вставить("ХешПользователяХранилища", ХешПароля);
	Параметры.Вставить("ИдентификаторПодключения", ИдентификаторПодключения);
	Параметры.Вставить("ИдентификаторПользователя", ИдентификаторПользователя);
	
	ТелоЗапроса = МенеджерЗапросов.ТелоЗапросаНаУдалениеПользователя(Параметры);
	
	Ответ = Коннектор.Post(Адрес, ТелоЗапроса);
	ОбработатьБазовыйОтветСервиса(Ответ);
	
КонецПроцедуры

// Восстанавливает (ранее удаленного) пользователя хранилища 1С.
// Для получения идентификатора пользователя хранилища, нужно воспользоваться
// методом `НайтиПользователя`.
//
// Параметры:
//   ИдентификаторПользователя - Строка - идентификатор пользователя хранилища
//
Процедура ВосстановитьПользователя(Знач ИдентификаторПользователя) Экспорт
	
	ИдентификаторПодключения = Новый УникальныйИдентификатор();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяХранилища", ИмяХранилища);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Вставить("ПользовательХранилища", Пользователь);
	Параметры.Вставить("ХешПользователяХранилища", ХешПароля);
	Параметры.Вставить("ИдентификаторПодключения", ИдентификаторПодключения);
	Параметры.Вставить("ИдентификаторПользователя", ИдентификаторПользователя);
	
	ТелоЗапроса = МенеджерЗапросов.ТелоЗапросаНаВосстановлениеПользователя(Параметры);
	
	Ответ = Коннектор.Post(Адрес, ТелоЗапроса);
	ОбработатьБазовыйОтветСервиса(Ответ);
	
КонецПроцедуры

// Возвращает список пользователей хранилища
//
//  Возвращаемое значение:
//   Массив - список объектов ПользовательХранилища
//
Функция СписокПользователей() Экспорт
	СписокПользователей = Новый Массив;
	
	ИдентификаторПодключения = Новый УникальныйИдентификатор();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяХранилища", ИмяХранилища);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Вставить("ПользовательХранилища", Пользователь);
	Параметры.Вставить("ХешПользователяХранилища", ХешПароля);
	Параметры.Вставить("ИдентификаторПодключения", ИдентификаторПодключения);
	
	ТелоЗапроса = МенеджерЗапросов.ТелоЗапросаНаПолучениеСпискаПользователей(Параметры);
	
	Ответ = Коннектор.Post(Адрес, ТелоЗапроса);
	ТекстОтвета = Ответ.Текст();
	Если Ответ.КодСостояния = 200 Тогда
		
		ОтветСервиса = ОбработкаXML.ПрочитатьОтветИзТекста(ТекстОтвета);
		Если ОтветСервиса.ЕстьОшибка Тогда
			Сообщить(ОтветСервиса.СодержаниеОшибки);
			Возврат СписокПользователей;
		КонецЕсли;
		
		call_return = ОтветСервиса.РезультатЧтения.Получить("call_return");
		users = call_return._Элементы.Получить("users");
		Для Каждого user Из users Цикл
			
			Пользователь = Новый ПользовательХранилища;
			Пользователь.Заполнить(user["value"]["second"]);
			
			СписокПользователей.Добавить(Пользователь);
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение(ТекстОтвета);
	КонецЕсли;
	
	Возврат СписокПользователей;
	
КонецФункции

// Возвращает список версий хранилища
//
//  Возвращаемое значение:
//   Массив - список объектов ВерсияХранилища
//
Функция СписокВерсий() Экспорт
	
	СписокВерсий = Новый Массив;
	
	ИдентификаторПодключения = Новый УникальныйИдентификатор();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяХранилища"            , ИмяХранилища);
	Параметры.Вставить("ВерсияПлатформы"         , ВерсияПлатформы);
	Параметры.Вставить("ПользовательХранилища"   , Пользователь);
	Параметры.Вставить("ХешПароляПользователя"   , ХешПароля);
	Параметры.Вставить("ИдентификаторПодключения", ИдентификаторПодключения);
	
	ТелоЗапроса = МенеджерЗапросов.ТелоЗапросаПолученияВерсийХранилища(Параметры);
	
	Ответ = Коннектор.Post(Адрес, ТелоЗапроса);
	ТекстОтвета = Ответ.Текст();
	Если Ответ.КодСостояния = 200 Тогда
		
		ОтветСервиса = ОбработкаXML.ПрочитатьОтветИзТекста(ТекстОтвета);
		Если ОтветСервиса.ЕстьОшибка Тогда
			Сообщить(ОтветСервиса.СодержаниеОшибки);
			Возврат СписокВерсий;
		КонецЕсли;
		
		call_return = ОтветСервиса.РезультатЧтения.Получить("call_return");
		versions = call_return._Элементы.Получить("versions");
		Для Каждого version Из versions Цикл
			
			Версия = Новый ВерсияХранилища();
			Версия.Заполнить(version["value"]["second"]);
			
			СписокВерсий.Добавить(Версия);
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение(ТекстОтвета);
	КонецЕсли;
	
	Возврат СписокВерсий;
	
КонецФункции // СписокВерсий()

Процедура ОбработатьБазовыйОтветСервиса(Ответ)
	Результат = Ответ.Текст();
	
	Если Ответ.КодСостояния = 200 Тогда
		ОтветСервиса = ОбработкаXML.ПрочитатьОтветИзТекста(Результат);
		Если ОтветСервиса.ЕстьОшибка Тогда
			ВызватьИсключение(ОтветСервиса.СодержаниеОшибки);
		КонецЕсли;
	Иначе
		ВызватьИсключение(Результат);
	КонецЕсли;
КонецПроцедуры